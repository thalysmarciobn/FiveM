// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DatabaseConsole.Migrations
{
    [DbContext(typeof(Context))]
    partial class ContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.32")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Models.Database.AccountCharacterFaceShapeModel", b =>
                {
                    b.Property<long>("CharacterId")
                        .HasColumnType("bigint");

                    b.Property<float>("CheekBoneHeight")
                        .HasColumnType("float");

                    b.Property<float>("CheekBoneWidth")
                        .HasColumnType("float");

                    b.Property<float>("CheekWidth")
                        .HasColumnType("float");

                    b.Property<float>("ChinBoneLength")
                        .HasColumnType("float");

                    b.Property<float>("ChinBoneLowering")
                        .HasColumnType("float");

                    b.Property<float>("ChinBoneWidth")
                        .HasColumnType("float");

                    b.Property<float>("ChinDimple")
                        .HasColumnType("float");

                    b.Property<float>("EyeBrowHeight")
                        .HasColumnType("float");

                    b.Property<float>("EyeBrowLength")
                        .HasColumnType("float");

                    b.Property<float>("EyeOpenings")
                        .HasColumnType("float");

                    b.Property<float>("JawBoneLength")
                        .HasColumnType("float");

                    b.Property<float>("JawBoneWidth")
                        .HasColumnType("float");

                    b.Property<float>("LipThickness")
                        .HasColumnType("float");

                    b.Property<float>("NeckThickness")
                        .HasColumnType("float");

                    b.Property<float>("NoseBoneHeight")
                        .HasColumnType("float");

                    b.Property<float>("NoseBoneTwist")
                        .HasColumnType("float");

                    b.Property<float>("NosePeakHeight")
                        .HasColumnType("float");

                    b.Property<float>("NosePeakLength")
                        .HasColumnType("float");

                    b.Property<float>("NosePeakLowering")
                        .HasColumnType("float");

                    b.Property<float>("NoseWidth")
                        .HasColumnType("float");

                    b.HasKey("CharacterId");

                    b.ToTable("account_character_faceshape");

                    b.HasData(
                        new
                        {
                            CharacterId = 1L,
                            CheekBoneHeight = 0f,
                            CheekBoneWidth = 0f,
                            CheekWidth = 0f,
                            ChinBoneLength = 0f,
                            ChinBoneLowering = 0f,
                            ChinBoneWidth = 0f,
                            ChinDimple = 0f,
                            EyeBrowHeight = 0f,
                            EyeBrowLength = 0f,
                            EyeOpenings = 0f,
                            JawBoneLength = 0f,
                            JawBoneWidth = 0f,
                            LipThickness = 0f,
                            NeckThickness = 0f,
                            NoseBoneHeight = 0f,
                            NoseBoneTwist = 0f,
                            NosePeakHeight = 0f,
                            NosePeakLength = 0f,
                            NosePeakLowering = 0f,
                            NoseWidth = 0f
                        });
                });

            modelBuilder.Entity("Models.Database.AccountCharacterHeritageModel", b =>
                {
                    b.Property<long>("CharacterId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsParent")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("ShapeFirstID")
                        .HasColumnType("int");

                    b.Property<float>("ShapeMix")
                        .HasColumnType("float");

                    b.Property<int>("ShapeSecondID")
                        .HasColumnType("int");

                    b.Property<int>("ShapeThirdID")
                        .HasColumnType("int");

                    b.Property<int>("SkinFirstID")
                        .HasColumnType("int");

                    b.Property<float>("SkinMix")
                        .HasColumnType("float");

                    b.Property<int>("SkinSecondID")
                        .HasColumnType("int");

                    b.Property<int>("SkinThirdID")
                        .HasColumnType("int");

                    b.Property<float>("ThirdMix")
                        .HasColumnType("float");

                    b.HasKey("CharacterId");

                    b.ToTable("account_character_heritage");

                    b.HasData(
                        new
                        {
                            CharacterId = 1L,
                            IsParent = false,
                            ShapeFirstID = 0,
                            ShapeMix = 0f,
                            ShapeSecondID = 0,
                            ShapeThirdID = 0,
                            SkinFirstID = 0,
                            SkinMix = 0f,
                            SkinSecondID = 0,
                            SkinThirdID = 0,
                            ThirdMix = 0f
                        });
                });

            modelBuilder.Entity("Models.Database.AccountCharacterModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long>("AccountId")
                        .HasColumnType("bigint");

                    b.Property<int>("Armor")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("Model")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Surname")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("Id", "AccountId");

                    b.ToTable("account_character");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            AccountId = 1L,
                            Armor = 0,
                            DateCreated = new DateTime(2023, 2, 8, 9, 46, 47, 573, DateTimeKind.Local).AddTicks(7506),
                            Gender = 0,
                            Model = "mp_m_freemode_01",
                            Name = "Admin",
                            Surname = "Thalys"
                        });
                });

            modelBuilder.Entity("Models.Database.AccountCharacterPedComponentModel", b =>
                {
                    b.Property<long>("CharacterId")
                        .HasColumnType("bigint");

                    b.Property<int>("ComponentId")
                        .HasColumnType("int");

                    b.Property<int>("Index")
                        .HasColumnType("int");

                    b.Property<int>("Texture")
                        .HasColumnType("int");

                    b.HasKey("CharacterId", "ComponentId");

                    b.ToTable("account_character_ped_component");

                    b.HasData(
                        new
                        {
                            CharacterId = 1L,
                            ComponentId = 0,
                            Index = 0,
                            Texture = 0
                        },
                        new
                        {
                            CharacterId = 1L,
                            ComponentId = 1,
                            Index = 0,
                            Texture = 0
                        },
                        new
                        {
                            CharacterId = 1L,
                            ComponentId = 2,
                            Index = 0,
                            Texture = 0
                        },
                        new
                        {
                            CharacterId = 1L,
                            ComponentId = 3,
                            Index = 0,
                            Texture = 0
                        },
                        new
                        {
                            CharacterId = 1L,
                            ComponentId = 4,
                            Index = 0,
                            Texture = 0
                        },
                        new
                        {
                            CharacterId = 1L,
                            ComponentId = 5,
                            Index = 0,
                            Texture = 0
                        },
                        new
                        {
                            CharacterId = 1L,
                            ComponentId = 6,
                            Index = 0,
                            Texture = 0
                        },
                        new
                        {
                            CharacterId = 1L,
                            ComponentId = 7,
                            Index = 0,
                            Texture = 0
                        },
                        new
                        {
                            CharacterId = 1L,
                            ComponentId = 8,
                            Index = 0,
                            Texture = 0
                        },
                        new
                        {
                            CharacterId = 1L,
                            ComponentId = 9,
                            Index = 0,
                            Texture = 0
                        },
                        new
                        {
                            CharacterId = 1L,
                            ComponentId = 10,
                            Index = 0,
                            Texture = 0
                        },
                        new
                        {
                            CharacterId = 1L,
                            ComponentId = 11,
                            Index = 0,
                            Texture = 0
                        });
                });

            modelBuilder.Entity("Models.Database.AccountCharacterPositionModel", b =>
                {
                    b.Property<long>("ChatacterId")
                        .HasColumnType("bigint");

                    b.Property<float>("X")
                        .HasColumnType("float");

                    b.Property<float>("Y")
                        .HasColumnType("float");

                    b.Property<float>("Z")
                        .HasColumnType("float");

                    b.HasKey("ChatacterId");

                    b.ToTable("account_character_position");

                    b.HasData(
                        new
                        {
                            ChatacterId = 1L,
                            X = 0f,
                            Y = 0f,
                            Z = 0f
                        });
                });

            modelBuilder.Entity("Models.Database.AccountModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("License")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<bool>("WhiteListed")
                        .HasColumnType("tinyint(1)")
                        .HasMaxLength(1);

                    b.HasKey("Id");

                    b.HasIndex("License")
                        .IsUnique();

                    b.HasIndex("Id", "License");

                    b.ToTable("accounts");
                });

            modelBuilder.Entity("Models.Database.AccountCharacterFaceShapeModel", b =>
                {
                    b.HasOne("Models.Database.AccountCharacterModel", null)
                        .WithOne("FaceShape")
                        .HasForeignKey("Models.Database.AccountCharacterFaceShapeModel", "CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Models.Database.AccountCharacterHeritageModel", b =>
                {
                    b.HasOne("Models.Database.AccountCharacterModel", null)
                        .WithOne("Heritage")
                        .HasForeignKey("Models.Database.AccountCharacterHeritageModel", "CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Models.Database.AccountCharacterPedComponentModel", b =>
                {
                    b.HasOne("Models.Database.AccountCharacterModel", null)
                        .WithMany("PedComponent")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Models.Database.AccountCharacterPositionModel", b =>
                {
                    b.HasOne("Models.Database.AccountCharacterModel", null)
                        .WithOne("Position")
                        .HasForeignKey("Models.Database.AccountCharacterPositionModel", "ChatacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
